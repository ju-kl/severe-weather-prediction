{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "import math\n",
    "from collections import Counter\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn import datasets, metrics, model_selection\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Weather Event Classification - Brea Beals\n",
    "\n",
    "\n",
    "### Objective: \n",
    "\n",
    "For this project, we explore the extreme weather events in our dataset. Extreme weather events are defined as weather events that result in damage or inury. Our objective is to classify extreme weather events by type. For this project we will only examine the top 3 weather events: \n",
    "\n",
    "* Thunderstorm Wind\n",
    "* Hail\n",
    "* Flood\n",
    "\n",
    "### Methodology: \n",
    "This notebook follows the following structure: \n",
    "\n",
    "__Part I: Data Preparation__\n",
    "\n",
    "As mentioned above, the three severe weather events considered in this classification task are Thunderstorm Wind, Hail, and Flood. Prior data prepartation was done in the notebook '01_data_preparation.ipynb', and prior feature engineering and selection were done in the notebook '03_feature_engineering.ipynb', which can be located in the github repository along with this notebook.\n",
    "\n",
    "__Part II: Modeling__\n",
    "\n",
    "For each model performance was determined by examining the confusion matrix and classfication report on both the test data and the training data. Overall accuracy, generalization gap, macro average test accuracy, and weighted average test accuracy were specifically examined to determine the model that performed best at overall classfication.\n",
    "\n",
    "    a) Base Model: Random Forest Classifier\n",
    "    b) Tuned Random Forest Classifier\n",
    "    c) Logistic Regression Classifier (using one-vs-rest)\n",
    "    d) AdaBoost Classifier\n",
    "    e) KNeighbors Classifier\n",
    "    f) XGBoost Classifier\n",
    "    \n",
    "__Part III: Applying PCA__\n",
    "\n",
    "PCA is applied to one of the top performing models. The number of components was selected in order to maintian cumulative explained variance of over 90%. \n",
    "\n",
    "__Part IV: Applying Sampling Techniques__\n",
    "\n",
    "These techniques are applied to the best performing model. Random Undersampling was used as the Undersampling technique and SMOTE was used as the Oversampling technique.\n",
    "\n",
    "    a) Undersampling\n",
    "    b) Oversampling\n",
    "\n",
    "__Part V: Summary__\n",
    "\n",
    "    a) Model Overview\n",
    "    b) Future Considerations\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part I: Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/numpy/lib/arraysetops.py:569: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask |= (ar1 == a)\n"
     ]
    }
   ],
   "source": [
    "# loading data\n",
    "df = pd.read_csv(\"dat_fe.csv\", index_col = \"Unnamed: 0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>EVENT_TYPE</th>\n",
       "      <th>INJURIES_DIRECT</th>\n",
       "      <th>INJURIES_INDIRECT</th>\n",
       "      <th>DEATHS_DIRECT</th>\n",
       "      <th>DEATHS_INDIRECT</th>\n",
       "      <th>DAMAGE_PROPERTY</th>\n",
       "      <th>DAMAGE_CROPS</th>\n",
       "      <th>fraction_cloud_cover</th>\n",
       "      <th>...</th>\n",
       "      <th>fraction_cloud_cover_10_day_min</th>\n",
       "      <th>relative_humidity_10_day_min</th>\n",
       "      <th>temperature_10_day_min</th>\n",
       "      <th>u_component_wind_10_day_min</th>\n",
       "      <th>v_component_wind_10_day_min</th>\n",
       "      <th>vertical_velocity_10_day_min</th>\n",
       "      <th>geo_cluster</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24.74</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>24.74</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.532600</td>\n",
       "      <td>265.40286</td>\n",
       "      <td>-1.206722</td>\n",
       "      <td>-13.830118</td>\n",
       "      <td>0.329384</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>24.74</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.532600</td>\n",
       "      <td>264.13422</td>\n",
       "      <td>-1.702287</td>\n",
       "      <td>-13.830118</td>\n",
       "      <td>0.310506</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.74</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.018421</td>\n",
       "      <td>263.48780</td>\n",
       "      <td>-3.931420</td>\n",
       "      <td>-13.830118</td>\n",
       "      <td>-0.045236</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.74</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.018421</td>\n",
       "      <td>261.52145</td>\n",
       "      <td>-3.931420</td>\n",
       "      <td>-13.830118</td>\n",
       "      <td>-0.089284</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude   longitude EVENT_TYPE  INJURIES_DIRECT  INJURIES_INDIRECT  \\\n",
       "0     24.74 -124.779999        NaN              0.0                0.0   \n",
       "1     24.74 -124.779999        NaN              0.0                0.0   \n",
       "2     24.74 -124.779999        NaN              0.0                0.0   \n",
       "3     24.74 -124.779999        NaN              0.0                0.0   \n",
       "4     24.74 -124.779999        NaN              0.0                0.0   \n",
       "\n",
       "   DEATHS_DIRECT  DEATHS_INDIRECT  DAMAGE_PROPERTY  DAMAGE_CROPS  \\\n",
       "0            0.0              0.0              0.0           0.0   \n",
       "1            0.0              0.0              0.0           0.0   \n",
       "2            0.0              0.0              0.0           0.0   \n",
       "3            0.0              0.0              0.0           0.0   \n",
       "4            0.0              0.0              0.0           0.0   \n",
       "\n",
       "   fraction_cloud_cover  ...  fraction_cloud_cover_10_day_min  \\\n",
       "0                   NaN  ...                              NaN   \n",
       "1                   0.0  ...                              0.0   \n",
       "2                   0.0  ...                              0.0   \n",
       "3                   0.0  ...                              0.0   \n",
       "4                   0.0  ...                              0.0   \n",
       "\n",
       "   relative_humidity_10_day_min  temperature_10_day_min  \\\n",
       "0                           NaN                     NaN   \n",
       "1                      7.532600               265.40286   \n",
       "2                      7.532600               264.13422   \n",
       "3                      7.018421               263.48780   \n",
       "4                      7.018421               261.52145   \n",
       "\n",
       "   u_component_wind_10_day_min  v_component_wind_10_day_min  \\\n",
       "0                          NaN                          NaN   \n",
       "1                    -1.206722                   -13.830118   \n",
       "2                    -1.702287                   -13.830118   \n",
       "3                    -3.931420                   -13.830118   \n",
       "4                    -3.931420                   -13.830118   \n",
       "\n",
       "   vertical_velocity_10_day_min  geo_cluster  year  month  day  \n",
       "0                           NaN            0  2015      1    4  \n",
       "1                      0.329384            0  2015      1    5  \n",
       "2                      0.310506            0  2015      1    6  \n",
       "3                     -0.045236            0  2015      1    7  \n",
       "4                     -0.089284            0  2015      1    8  \n",
       "\n",
       "[5 rows x 43 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of extreme weather events: 61063\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of extreme weather events: {}\".format(df.EVENT_TYPE.value_counts().sum()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of extreme weather events by category:\n",
      "Thunderstorm Wind           23471\n",
      "Hail                        14619\n",
      "Flash Flood                  6885\n",
      "Flood                        6807\n",
      "Marine Thunderstorm Wind     4027\n",
      "Heavy Rain                   2276\n",
      "Tornado                      2015\n",
      "Lightning                     963\n",
      "Name: EVENT_TYPE, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of extreme weather events by category:\\n{}\".format(df.EVENT_TYPE.value_counts()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#copying the dataset before altering\n",
    "df_events = df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this project we are making the assumption that \"Marine Thunderstorm Wind\" and \"Thunderstorm Wind\" can be combined into one category, as well as \"Flash Flood\" and \"Flood.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#combining thunderstorm wind with marine thunderstorm wind\n",
    "df_events[\"EVENT_TYPE\"]= df_events[\"EVENT_TYPE\"].str.replace(\"Marine Thunderstorm Wind\", \"Thunderstorm Wind\")\n",
    "\n",
    "#combining flash flood with flood\n",
    "df_events[\"EVENT_TYPE\"]= df_events[\"EVENT_TYPE\"].str.replace(\"Flash Flood\", \"Flood\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Thunderstorm Wind    27498\n",
       "Hail                 14619\n",
       "Flood                13692\n",
       "Heavy Rain            2276\n",
       "Tornado               2015\n",
       "Lightning              963\n",
       "Name: EVENT_TYPE, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_events.EVENT_TYPE.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Thunderstorm Wind    27498\n",
       "Hail                 14619\n",
       "Flood                13692\n",
       "Name: EVENT_TYPE, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_events = df_events[df_events.EVENT_TYPE.isin([\"Thunderstorm Wind\", \"Hail\", \"Flood\"])]\n",
    "df_events.EVENT_TYPE.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping nas\n",
    "df_events = df_events.dropna()\n",
    "#dropping all injury/damage realted columns as well as year and day\n",
    "df_events = df_events.drop([\"INJURIES_DIRECT\", \"INJURIES_INDIRECT\", \"DEATHS_DIRECT\", \"DEATHS_INDIRECT\", \"DAMAGE_PROPERTY\", \"DAMAGE_CROPS\",\"year\", \"day\"], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The weather event data is imblananced between the three classes. We will model this multi-class classification with the imbalanced data first, then apply different balancing methods to see if the model can be improved. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#For modeling with a multi-class classifier\n",
    "\n",
    "#Multiclass\n",
    "\n",
    "y = df_events[[\"EVENT_TYPE\"]]\n",
    "X = df_events.drop([\"EVENT_TYPE\"], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set seed for reproducibility\n",
    "SEED = 1\n",
    "# split data into train and test \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size = 0.3, \n",
    "                                                    random_state = SEED)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "std_scaler = StandardScaler()\n",
    "\n",
    "X_train_scaled = std_scaler.fit_transform(X_train)\n",
    "X_test_scaled = std_scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part II: Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A) Multiclass Classification: Random Forest Base Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=None, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                       n_jobs=None, oob_score=False, random_state=1, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set seed for reproducibility\n",
    "SEED = 1\n",
    "\n",
    "#fitting Random Forest Classifier model\n",
    "rf = RandomForestClassifier(random_state=SEED)\n",
    "rf.fit(X_train_scaled,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predicted classes for rf baseline model\n",
    "y_pred_base = rf.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Random Forest MultiClass Base Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.76      0.57      0.65      3989\n",
      "             Hail       0.63      0.58      0.60      4387\n",
      "Thunderstorm Wind       0.70      0.81      0.75      8360\n",
      "\n",
      "         accuracy                           0.69     16736\n",
      "        macro avg       0.70      0.65      0.67     16736\n",
      "     weighted avg       0.70      0.69      0.69     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test Data: Base Model\n",
    "\n",
    "#confusion matrix for rf base model\n",
    "test_matrix_base = confusion_matrix(y_test, y_pred_base)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(test_matrix_base, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass Base Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for rf base model\n",
    "test_report_base = classification_report(y_test, y_pred_base)\n",
    "print(test_report_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Random Forest MultiClass Base Model - Train Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       1.00      1.00      1.00      9691\n",
      "             Hail       1.00      1.00      1.00     10232\n",
      "Thunderstorm Wind       1.00      1.00      1.00     19125\n",
      "\n",
      "         accuracy                           1.00     39048\n",
      "        macro avg       1.00      1.00      1.00     39048\n",
      "     weighted avg       1.00      1.00      1.00     39048\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#training data prediction\n",
    "#predicted classes for rf baseline model \n",
    "y_tpred_base = rf.predict(X_train_scaled)\n",
    "\n",
    "train_matrix_base = confusion_matrix(y_train, y_tpred_base)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(train_matrix_base, annot=True, cmap=\"Blues\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass Base Model - Train Data'))\n",
    "\n",
    "#classification report for rf base model\n",
    "train_report_base = classification_report(y_train, y_tpred_base)\n",
    "print(train_report_base)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly this model is extremely overfit. We will do some hyperparameter tuning to improve the model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The top 5 feautres for the Random Forest Base Model: \n",
      "longitude                  0.071689\n",
      "temperature                0.044652\n",
      "temperature_10_day_mean    0.039563\n",
      "v_component_wind           0.036548\n",
      "temperature_10_day_max     0.036548\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Create a pd.Series of features importances\n",
    "importances_rf = pd.Series(rf.feature_importances_,\n",
    "index = X_train.columns)\n",
    "# Sort importances_rf - top 5\n",
    "sorted_importances_rf = importances_rf.sort_values(ascending = False)[:5]\n",
    "# Make a horizontal bar plot\n",
    "sorted_importances_rf.plot(kind='barh', color='blue')\n",
    "plt.title(\"Base Model Top 5 Features\")\n",
    "plt.show()\n",
    "\n",
    "print(\"The top 5 feautres for the Random Forest Base Model: \\n{}\".format(sorted_importances_rf))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## B) Multiclass Classification: Random Searched Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  16 tasks      | elapsed:   53.9s\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  3.0min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:739: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.best_estimator_.fit(X, y, **fit_params)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=RandomForestClassifier(bootstrap=True,\n",
       "                                                    ccp_alpha=0.0,\n",
       "                                                    class_weight=None,\n",
       "                                                    criterion='gini',\n",
       "                                                    max_depth=None,\n",
       "                                                    max_features='auto',\n",
       "                                                    max_leaf_nodes=None,\n",
       "                                                    max_samples=None,\n",
       "                                                    min_impurity_decrease=0.0,\n",
       "                                                    min_impurity_split=None,\n",
       "                                                    min_samples_leaf=1,\n",
       "                                                    min_samples_split=2,\n",
       "                                                    min_weight_fraction_leaf=0.0,\n",
       "                                                    n_estimators=100,\n",
       "                                                    n_jobs=None,\n",
       "                                                    oob_score=False,\n",
       "                                                    random_state=1, verbose=0,\n",
       "                                                    warm_start=False),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions={'max_depth': [2, 4, 5, 6, 7, 8],\n",
       "                                        'max_features': ['auto', 'sqrt',\n",
       "                                                         'log2'],\n",
       "                                        'n_estimators': [100, 200, 500]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "random_grid = { \n",
    "    'n_estimators': [100, 200, 500],\n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'max_depth' : [2,4,5,6,7,8]\n",
    "}\n",
    "\n",
    "\n",
    "#fitting Random Forest Classifier model\n",
    "rf_gs = RandomForestClassifier(random_state=SEED)\n",
    "\n",
    "# Create gridsearch object with various combinations of parameters\n",
    "rf_gs = RandomizedSearchCV(rf, random_grid, cv = 5, \n",
    "                       scoring = 'accuracy', \n",
    "                       verbose=3,\n",
    "                       n_jobs = -1)\n",
    "\n",
    "rf_gs.fit(X_train_scaled,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best performing model\n",
    "rf_gs = rf_gs.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#saving model\n",
    "import pickle\n",
    "filename = 'rf_gs.sav'\n",
    "pickle.dump(rf_gs, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "import pickle\n",
    "rf_gs = pickle.load(open('rf_gs.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Random Forest MultiClass GridSearch Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.73      0.40      0.51      3989\n",
      "             Hail       0.57      0.50      0.53      4387\n",
      "Thunderstorm Wind       0.63      0.81      0.71      8360\n",
      "\n",
      "         accuracy                           0.63     16736\n",
      "        macro avg       0.64      0.57      0.59     16736\n",
      "     weighted avg       0.64      0.63      0.62     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test Data: Random Forest Grid Search\n",
    "\n",
    "#predicted classes for rf grid search model\n",
    "y_pred_base_gs = rf_gs.predict(X_test_scaled)\n",
    "\n",
    "#confusion matrix for rf gs model\n",
    "test_matrix_base_gs = confusion_matrix(y_test, y_pred_base_gs)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(test_matrix_base_gs, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass GridSearch Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for rf gs model\n",
    "test_report_base_gs = classification_report(y_test, y_pred_base_gs)\n",
    "print(test_report_base_gs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Training Data: Random Forest Grid Search\n",
    "\n",
    "#predicted classes for rf grid search model\n",
    "y_tpred_base_gs = rf_gs.predict(X_train_scaled)\n",
    "\n",
    "#confusion matrix for rf gs model\n",
    "train_matrix_base_gs = confusion_matrix(y_train, y_tpred_base_gs)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(train_matrix_base_gs, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass GridSearch Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for rf gs model\n",
    "train_report_base_gs = classification_report(y_train, y_tpred_base_gs)\n",
    "print(train_report_base_gs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1581  434 1974]\n",
      " [ 241 2199 1947]\n",
      " [ 349 1215 6796]]\n",
      "Normalized confusion matrix\n",
      "[[0.39633993 0.1087992  0.49486087]\n",
      " [0.05493504 0.5012537  0.44381126]\n",
      " [0.04174641 0.14533493 0.81291866]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "class_names = [\"Flood\", \"Hail\", \"Thunderstorm Wind\"]\n",
    "\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(rf_gs, X_test_scaled, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=\"YlGnBu\",\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have substantially improved the overfitting from the base model. Our grid searched model has an accuracy of 63% and a weighted accuracy of 62% on the test data. Based on the f1 scores, the harmonic mean between precision and recall, the model is best performing on \"Thunderstorm Wind\" - which makes sense because it is the class with the most instances. Below we look at which features are most imporatant in our classification: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The top 5 feautres for the Random Forest with Search: \n",
      "longitude                  0.201994\n",
      "geo_cluster                0.074837\n",
      "temperature                0.074837\n",
      "temperature_10_day_mean    0.053511\n",
      "temperature_10_day_max     0.047504\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Create a pd.Series of features importances\n",
    "importances_rf_gs = pd.Series(rf_gs.feature_importances_,\n",
    "index = X_train.columns)\n",
    "# Sort importances_rf - top 5\n",
    "sorted_importances_rf_gs = importances_rf_gs.sort_values(ascending = False)[:5]\n",
    "# Make a horizontal bar plot\n",
    "sorted_importances_rf_gs.plot(kind='barh', color='blue')\n",
    "plt.title(\"Random Forest with Search: Top 5 Features\")\n",
    "plt.show()\n",
    "\n",
    "print(\"The top 5 feautres for the Random Forest with Search: \\n{}\".format(sorted_importances_rf_gs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is interesitng to note that while longitude still remains the most important feautre, geo_cluster (which was not even in the top 5 before) is now the second most important feature. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "geo_cluster  EVENT_TYPE       \n",
       "0            Hail                   940\n",
       "             Thunderstorm Wind     1361\n",
       "1            Hail                  2388\n",
       "             Thunderstorm Wind    12695\n",
       "2            Hail                  7559\n",
       "             Thunderstorm Wind     6562\n",
       "3            Hail                  3732\n",
       "             Thunderstorm Wind     6867\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#exploring the distribution of each of the event types within each geo_cluster\n",
    "df_events.groupby(['geo_cluster', 'EVENT_TYPE']).size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It appears that there are a disproportionate amount of Thunderstorm Wind events in geo_cluster 1, and a disproportionate amount of Floods in geo_cluster 0, and a dispropotionate amount of Hail events in geo_cluster 2. geo_cluster 3 follows the same distribution as the data. This indicates that geo_cluster will be extremely imporant in classification. \n",
    "\n",
    "Longitude is also an extremely important factor. I explore the longitude distribution below: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EVENT_TYPE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Flood</th>\n",
       "      <td>13680.0</td>\n",
       "      <td>-93.399306</td>\n",
       "      <td>12.532181</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>-98.739999</td>\n",
       "      <td>-92.019999</td>\n",
       "      <td>-84.459999</td>\n",
       "      <td>-67.659999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hail</th>\n",
       "      <td>14619.0</td>\n",
       "      <td>-95.965453</td>\n",
       "      <td>9.076016</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>-102.099999</td>\n",
       "      <td>-97.059999</td>\n",
       "      <td>-90.339999</td>\n",
       "      <td>-67.659999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thunderstorm Wind</th>\n",
       "      <td>27485.0</td>\n",
       "      <td>-88.872314</td>\n",
       "      <td>10.002352</td>\n",
       "      <td>-124.779999</td>\n",
       "      <td>-95.379999</td>\n",
       "      <td>-86.979999</td>\n",
       "      <td>-81.099999</td>\n",
       "      <td>-67.659999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     count       mean        std         min         25%  \\\n",
       "EVENT_TYPE                                                                 \n",
       "Flood              13680.0 -93.399306  12.532181 -124.779999  -98.739999   \n",
       "Hail               14619.0 -95.965453   9.076016 -124.779999 -102.099999   \n",
       "Thunderstorm Wind  27485.0 -88.872314  10.002352 -124.779999  -95.379999   \n",
       "\n",
       "                         50%        75%        max  \n",
       "EVENT_TYPE                                          \n",
       "Flood             -92.019999 -84.459999 -67.659999  \n",
       "Hail              -97.059999 -90.339999 -67.659999  \n",
       "Thunderstorm Wind -86.979999 -81.099999 -67.659999  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_events[\"longitude\"].groupby(df_events[\"EVENT_TYPE\"]).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a5e99f610>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hail_long = df_events.longitude[df_events[\"EVENT_TYPE\"] == \"Hail\"]\n",
    "hail_long_dist = pd.Series(hail_long, name=\"Longitude Distribution of Hail\")\n",
    "sns.distplot(hail_long_dist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a5e9e29d0>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flood_long = df_events.longitude[df_events[\"EVENT_TYPE\"] == \"Flood\"]\n",
    "flood_long_dist = pd.Series(flood_long, name=\"Longitude Distribution of Flood\")\n",
    "sns.distplot(flood_long_dist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a65e7ebd0>"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wind_long = df_events.longitude[df_events[\"EVENT_TYPE\"] == \"Thunderstorm Wind\"]\n",
    "wind_long_dist = pd.Series(wind_long, name=\"Longitude Distribution of Wind\")\n",
    "sns.distplot(wind_long_dist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## C) Multiclass Classification: Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  34 tasks      | elapsed:    3.8s\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    5.7s finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "lr = LogisticRegression()\n",
    "\n",
    "# Create param grid.\n",
    "param_grid = { \n",
    "    'class_weight': ['dict', 'balanced'],\n",
    "    'C': [0.001,0.01,0.1,1.,10,100],\n",
    "    'max_iter': [500]\n",
    "}\n",
    "\n",
    "\n",
    "clf = RandomizedSearchCV(lr, param_grid, \n",
    "                         scoring ='accuracy', \n",
    "                         cv = 5, \n",
    "                         verbose=True, \n",
    "                         n_jobs=-1)\n",
    "\n",
    "# Fit on data\n",
    "best_clf = clf.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best performing model\n",
    "lr_gs = best_clf.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "#saving model\n",
    "import pickle\n",
    "filename = 'lr_gs.sav'\n",
    "pickle.dump(lr_gs, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "lr_gs = pickle.load(open('lr_gs.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Logistic Regression MultiClass GridSearch Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.46      0.49      0.48      3989\n",
      "             Hail       0.46      0.63      0.53      4387\n",
      "Thunderstorm Wind       0.71      0.54      0.61      8360\n",
      "\n",
      "         accuracy                           0.55     16736\n",
      "        macro avg       0.54      0.56      0.54     16736\n",
      "     weighted avg       0.58      0.55      0.56     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test Data: Logistic Regression + RF Grid Search\n",
    "\n",
    "y_pred_base_lr = lr_gs.predict(X_test_scaled)\n",
    "\n",
    "test_matrix_base_lr = confusion_matrix(y_test, y_pred_base_lr)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(test_matrix_base_lr, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Logistic Regression MultiClass GridSearch Model - Test Data'))\n",
    "\n",
    "test_report_base_lr = classification_report(y_test, y_pred_base_lr)\n",
    "print(test_report_base_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Logistic Regression MultiClass GridSearch Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.48      0.49      0.48      9691\n",
      "             Hail       0.46      0.65      0.54     10232\n",
      "Thunderstorm Wind       0.70      0.54      0.61     19125\n",
      "\n",
      "         accuracy                           0.56     39048\n",
      "        macro avg       0.55      0.56      0.54     39048\n",
      "     weighted avg       0.58      0.56      0.56     39048\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training Data: Logistic Regression + RF Grid Search\n",
    "\n",
    "y_tpred_base_lr = lr_gs.predict(X_train_scaled)\n",
    "\n",
    "train_matrix_base_lr = confusion_matrix(y_train, y_tpred_base_lr)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(train_matrix_base_lr, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Logistic Regression MultiClass GridSearch Model - Test Data'))\n",
    "\n",
    "train_report_base_lr = classification_report(y_train, y_tpred_base_lr)\n",
    "print(train_report_base_lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This model has a good balance of bias and variance, but overall underperforms our previous model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## D) Multiclass Classification: AdaBoost with Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fitting AdaBoost Classifier model with default parameters\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "ab = AdaBoostClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  25 tasks      | elapsed:  4.8min\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  9.1min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=AdaBoostClassifier(algorithm='SAMME.R',\n",
       "                                                base_estimator=None,\n",
       "                                                learning_rate=1.0,\n",
       "                                                n_estimators=50,\n",
       "                                                random_state=None),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions={'learning_rate': [0.4, 0.6, 0.8, 1,\n",
       "                                                          1.2],\n",
       "                                        'n_estimators': [100, 200, 300, 400],\n",
       "                                        'random_state': [1]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=2)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#setting grid search parameters\n",
    "parameters = {'n_estimators':[100, 200, 300, 400], \n",
    "              'learning_rate': [0.4,0.6,0.8, 1, 1.2],\n",
    "              'random_state': [SEED]}\n",
    "\n",
    "# Create gridsearch object with various combinations of parameters\n",
    "ab_Grid = RandomizedSearchCV(ab, parameters, cv = 5, \n",
    "                       scoring = 'accuracy', \n",
    "                       verbose=2,\n",
    "                       n_jobs = -1)\n",
    "#fitting model\n",
    "ab_Grid.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best performing model\n",
    "ab_best = ab_Grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "#saving model\n",
    "import pickle\n",
    "filename = 'ab_ml_project.sav'\n",
    "pickle.dump(ab_best, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "ab_best = pickle.load(open('ab_ml_project.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'AdaBoost MultiClass Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.60      0.42      0.49      3989\n",
      "             Hail       0.55      0.49      0.52      4387\n",
      "Thunderstorm Wind       0.64      0.77      0.70      8360\n",
      "\n",
      "         accuracy                           0.61     16736\n",
      "        macro avg       0.60      0.56      0.57     16736\n",
      "     weighted avg       0.61      0.61      0.60     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test: AdaBoost\n",
    "\n",
    "#predicted classes for adaboost\n",
    "y_pred_ab = ab_best.predict(X_test_scaled)\n",
    "\n",
    "\n",
    "#confusion matrix for adaboost\n",
    "test_matrix_ab = confusion_matrix(y_test, y_pred_ab)\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(test_matrix_ab, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'AdaBoost MultiClass Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for adaboost\n",
    "test_report_ab = classification_report(y_test, y_pred_ab)\n",
    "print(test_report_ab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'AdaBoost MultiClass Model - Training Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.63      0.44      0.52      9691\n",
      "             Hail       0.58      0.52      0.54     10232\n",
      "Thunderstorm Wind       0.63      0.77      0.70     19125\n",
      "\n",
      "         accuracy                           0.62     39048\n",
      "        macro avg       0.61      0.57      0.59     39048\n",
      "     weighted avg       0.62      0.62      0.61     39048\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training Data: Adaboost\n",
    "\n",
    "#predicted classes for adaboost\n",
    "y_pred_ab_train = ab_best.predict(X_train_scaled)\n",
    "\n",
    "#confusion matrix for adaboost\n",
    "train_matrix_ab = confusion_matrix(y_train, y_pred_ab_train)\n",
    "print(sns.heatmap(train_matrix_ab, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'AdaBoost MultiClass Model - Training Data'))\n",
    "\n",
    "\n",
    "#classification report for adaboost\n",
    "train_report_ab = classification_report(y_train, y_pred_ab_train)\n",
    "print(train_report_ab)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This model has a small generalzation gap, and is performing relatively well. However, it it still not performing quite as well as our Random Forest Model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## E ) KNeighbors Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  16 tasks      | elapsed:  2.0min\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  5.9min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:739: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  self.best_estimator_.fit(X, y, **fit_params)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=KNeighborsClassifier(algorithm='auto',\n",
       "                                                  leaf_size=30,\n",
       "                                                  metric='minkowski',\n",
       "                                                  metric_params=None,\n",
       "                                                  n_jobs=None, n_neighbors=5,\n",
       "                                                  p=2, weights='uniform'),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions=[{'n_neighbors': [3, 4, 5, 6, 7, 10],\n",
       "                                         'weights': ['uniform', 'distance']}],\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "param_grid = [{'weights': [\"uniform\", \"distance\"], 'n_neighbors': [3, 4, 5, 6, 7, 10]}]\n",
    "\n",
    "knn_clf = KNeighborsClassifier()\n",
    "grid_search = RandomizedSearchCV(knn_clf, \n",
    "                                 param_grid, \n",
    "                                 cv=5, \n",
    "                                 verbose=3, \n",
    "                                 n_jobs=-1, \n",
    "                                 scoring = \"accuracy\")\n",
    "\n",
    "grid_search.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best performing model\n",
    "knn_best = grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#saving model\n",
    "import pickle\n",
    "filename = 'knn_ml_project.sav'\n",
    "pickle.dump(knn_best, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "knn_best = pickle.load(open('knn_ml_project.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'KNeighbors MultiClass Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.69      0.57      0.63      3989\n",
      "             Hail       0.59      0.55      0.57      4387\n",
      "Thunderstorm Wind       0.69      0.77      0.73      8360\n",
      "\n",
      "         accuracy                           0.66     16736\n",
      "        macro avg       0.66      0.63      0.64     16736\n",
      "     weighted avg       0.66      0.66      0.66     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#predicted classes for KNN\n",
    "y_pred_knn = knn_best.predict(X_test_scaled)\n",
    "\n",
    "\n",
    "#confusion matrix for KNN\n",
    "test_matrix_knn = confusion_matrix(y_test, y_pred_knn)\n",
    "print(sns.heatmap(test_matrix_knn, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'KNeighbors MultiClass Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for KNN\n",
    "test_report_knn = classification_report(y_test, y_pred_knn)\n",
    "print(test_report_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'KNeighbors MultiClass Model - Training Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       1.00      1.00      1.00      9691\n",
      "             Hail       1.00      1.00      1.00     10232\n",
      "Thunderstorm Wind       1.00      1.00      1.00     19125\n",
      "\n",
      "         accuracy                           1.00     39048\n",
      "        macro avg       1.00      1.00      1.00     39048\n",
      "     weighted avg       1.00      1.00      1.00     39048\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training: KNN\n",
    "\n",
    "#predicted classes for KNN\n",
    "y_pred_knn_train = knn_best.predict(X_train_scaled)\n",
    "\n",
    "\n",
    "#confusion matrix for KNN\n",
    "train_matrix_knn = confusion_matrix(y_train, y_pred_knn_train)\n",
    "print(sns.heatmap(train_matrix_knn, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'KNeighbors MultiClass Model - Training Data'))\n",
    "\n",
    "\n",
    "#classification report for KNN\n",
    "train_report_knn = classification_report(y_train, y_pred_knn_train)\n",
    "print(train_report_knn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interestingly, this model is extremely overfit without getting an improvement in accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## F) XGB Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  16 tasks      | elapsed:  4.6min\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed: 13.1min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=XGBClassifier(base_score=0.5, booster='gbtree',\n",
       "                                           colsample_bylevel=1,\n",
       "                                           colsample_bynode=1,\n",
       "                                           colsample_bytree=1, gamma=0,\n",
       "                                           learning_rate=0.1, max_delta_step=0,\n",
       "                                           max_depth=3, min_child_weight=1,\n",
       "                                           missing=None, n_estimators=100,\n",
       "                                           n_jobs=1, nthread=None,\n",
       "                                           objective='binary:logistic',\n",
       "                                           random_state=1, reg_alpha=0,\n",
       "                                           reg_lambda=1, scale_pos_weight=1,\n",
       "                                           seed=None, silent=None, subsample=1,\n",
       "                                           verbosity=1),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions={'gamma': [0.0, 0.5, 1.0, 1.5],\n",
       "                                        'learning_rate': [0.0001, 0.001, 0.01,\n",
       "                                                          0.1, 0.2],\n",
       "                                        'max_depth': [1, 2],\n",
       "                                        'n_estimators': [100, 500, 750]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "#fitting RandomizedSearchCV model with default parameters\n",
    "xgb_clf = XGBClassifier(random_state = SEED)\n",
    "\n",
    "#creating list for n_estimators, learning_rate, and gamma_list\n",
    "gamma_list = np.arange(0,2,0.5).tolist()\n",
    "\n",
    "#setting grid search parameters\n",
    "parameters_xgb = {'n_estimators': [100, 500, 750], \n",
    "              'learning_rate': [0.0001, 0.001, 0.01, 0.1, 0.2],\n",
    "              'max_depth': [1, 2],\n",
    "              'gamma': gamma_list}\n",
    "\n",
    "# Create gridsearch object with various combinations of parameters\n",
    "xgb_rs = RandomizedSearchCV(xgb_clf, parameters_xgb, cv = 5, \n",
    "                       scoring = 'accuracy', \n",
    "                       verbose=3,\n",
    "                       n_jobs = -1)\n",
    "#fitting model\n",
    "xgb_rs.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best estimator\n",
    "xgb_best_est = xgb_rs.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "# save the model to disk\n",
    "filename = 'xgb_ml_project.sav'\n",
    "pickle.dump(xgb_best_est, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "import pickle\n",
    "xgb_best_est = pickle.load(open('xgb_ml_project.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'XGBoost MultiClass Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.67      0.47      0.55      3989\n",
      "             Hail       0.57      0.53      0.55      4387\n",
      "Thunderstorm Wind       0.66      0.77      0.71      8360\n",
      "\n",
      "         accuracy                           0.64     16736\n",
      "        macro avg       0.63      0.59      0.60     16736\n",
      "     weighted avg       0.64      0.64      0.63     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test: XGB\n",
    "\n",
    "y_pred_xgb = xgb_best_est.predict(X_test_scaled)\n",
    "\n",
    "\n",
    "#confusion matrix for xgb\n",
    "test_matrix_xgb = confusion_matrix(y_test, y_pred_xgb)\n",
    "print(sns.heatmap(test_matrix_xgb, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'XGBoost MultiClass Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for xgb\n",
    "test_report_xgb = classification_report(y_test, y_pred_xgb)\n",
    "print(test_report_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'XGBoost MultiClass Model - Training Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.72      0.50      0.59      9691\n",
      "             Hail       0.62      0.57      0.60     10232\n",
      "Thunderstorm Wind       0.67      0.80      0.73     19125\n",
      "\n",
      "         accuracy                           0.67     39048\n",
      "        macro avg       0.67      0.63      0.64     39048\n",
      "     weighted avg       0.67      0.67      0.66     39048\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Train: XGB\n",
    "\n",
    "y_pred_xgb_train = xgb_best_est.predict(X_train_scaled)\n",
    "\n",
    "#confusion matrix for xgb\n",
    "train_matrix_xgb = confusion_matrix(y_train, y_pred_xgb_train)\n",
    "print(sns.heatmap(train_matrix_xgb, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'XGBoost MultiClass Model - Training Data'))\n",
    "\n",
    "\n",
    "#classification report for xgb\n",
    "train_report_xgb = classification_report(y_train, y_pred_xgb_train)\n",
    "print(train_report_xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1869  472 1648]\n",
      " [ 347 2332 1708]\n",
      " [ 592 1311 6457]]\n",
      "Normalized confusion matrix\n",
      "[[0.46853848 0.11832539 0.41313612]\n",
      " [0.07909733 0.53157055 0.38933212]\n",
      " [0.0708134  0.15681818 0.77236842]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "class_names = [\"Flood\", \"Hail\", \"Thunderstorm Wind\"]\n",
    "\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(xgb_best_est, X_test_scaled, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=\"YlGnBu\",\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is our best model yet. Our overall test accuracy is 1% higher than our second best performing model, but our f1-scores for every class are also higher. This is performing better in recall for Flood and Hail, while also having better precision with Thunderstorm Wind. This is in line with what we want from our model.\n",
    "\n",
    "Let's look at the feature importances below: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The top 5 feautres for the XGB Model: \n",
      "fraction_cloud_cover                0.139981\n",
      "fraction_cloud_cover_10_day_mean    0.104886\n",
      "longitude                           0.084950\n",
      "temperature                         0.068461\n",
      "geo_cluster                         0.067699\n",
      "dtype: float32\n"
     ]
    }
   ],
   "source": [
    "# Create a pd.Series of features importances\n",
    "importances_xgb = pd.Series(xgb_best_est.feature_importances_,\n",
    "index = X_train.columns)\n",
    "# Sort importances - top 5\n",
    "sorted_importances_xgb = importances_xgb.sort_values(ascending = False)[:5]\n",
    "# Make a horizontal bar plot\n",
    "sorted_importances_xgb.plot(kind='barh', color='blue')\n",
    "plt.title(\"XGB Model Top 5 Features\")\n",
    "plt.show()\n",
    "\n",
    "print(\"The top 5 feautres for the XGB Model: \\n{}\".format(sorted_importances_xgb))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is our first model to not have longitude as the most important feature. The new top two features are fraction_cloud_coverage, and fraction_cloud_coverage_10_day_mean. These two features had not previously appeared in any top 5 feautres list for any of our models. Clearly, this model is learning information from these feautres that the other models had not been able to."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probability Estimates For Each Class: [[0.3239929  0.20896249 0.46704462]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Probability Estimates For Each Class: {}\".format(xgb_best_est.predict_proba(X_test_scaled[:1])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part III: Applying PCA "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: applying PCA to our tuned Random Forest Model rather than our XGB Classifier as the XGB Classifer takes well over double the time to run with only 1% better accuracy. If the PCA shows improvement, we will apply it to the XGB Classifer model as well. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "#pca on X_train_scaled\n",
    "pca = PCA()\n",
    "pca = pca.fit(X_train_scaled)\n",
    "\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.title(\"Cumulative Explained Variance for PCA\")\n",
    "plt.xlabel('number of components')\n",
    "plt.ylabel('cumulative explained variance');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.2650639 , 0.3980103 , 0.4704846 , 0.53000262, 0.58400197,\n",
       "       0.62891903, 0.66970303, 0.70671661, 0.74253353, 0.77213915,\n",
       "       0.79906479, 0.82423239, 0.84755824, 0.86924672, 0.8870888 ,\n",
       "       0.90373072])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cumulative explained variance\n",
    "np.cumsum(pca.explained_variance_ratio_)[:16]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using only 16 principal components explains over 90% of our variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "n_comp = 16\n",
    "\n",
    "#pca on X_train_scaled\n",
    "pca = PCA(n_components = n_comp, random_state = 1)\n",
    "X_train_pca = pca.fit_transform(X_train_scaled)\n",
    "\n",
    "#pca on X_test_scaled\n",
    "X_test_pca = pca.transform(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  16 tasks      | elapsed:  1.4min\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  3.6min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:739: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.best_estimator_.fit(X, y, **fit_params)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=RandomForestClassifier(bootstrap=True,\n",
       "                                                    ccp_alpha=0.0,\n",
       "                                                    class_weight=None,\n",
       "                                                    criterion='gini',\n",
       "                                                    max_depth=None,\n",
       "                                                    max_features='auto',\n",
       "                                                    max_leaf_nodes=None,\n",
       "                                                    max_samples=None,\n",
       "                                                    min_impurity_decrease=0.0,\n",
       "                                                    min_impurity_split=None,\n",
       "                                                    min_samples_leaf=1,\n",
       "                                                    min_samples_split=2,\n",
       "                                                    min_weight_fraction_leaf=0.0,\n",
       "                                                    n_estimators=100,\n",
       "                                                    n_jobs=None,\n",
       "                                                    oob_score=False,\n",
       "                                                    random_state=1, verbose=0,\n",
       "                                                    warm_start=False),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions={'max_depth': [2, 4, 5, 6, 7, 8],\n",
       "                                        'max_features': ['auto', 'sqrt',\n",
       "                                                         'log2'],\n",
       "                                        'n_estimators': [100, 200, 500]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "random_grid = { \n",
    "    'n_estimators': [100, 200, 500],\n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'max_depth' : [2,4,5,6,7,8]\n",
    "}\n",
    "\n",
    "\n",
    "#fitting Random Forest Classifier model\n",
    "rf_pca = RandomForestClassifier(random_state=SEED)\n",
    "\n",
    "# Create gridsearch object with various combinations of parameters\n",
    "rf_gs_pca = RandomizedSearchCV(rf_pca, random_grid, cv = 5, \n",
    "                       scoring = 'accuracy', \n",
    "                       verbose=3,\n",
    "                       n_jobs = -1)\n",
    "\n",
    "rf_gs_pca.fit(X_train_pca,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best performing model\n",
    "rf_gs_pca = rf_gs_pca.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "#saving model\n",
    "import pickle\n",
    "filename = 'rf_gs_pca.sav'\n",
    "pickle.dump(rf_gs_pca, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "import pickle\n",
    "rf_gs_pca = pickle.load(open('rf_gs_pca.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Random Forest MultiClass GridSearch Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.67      0.31      0.42      3989\n",
      "             Hail       0.54      0.38      0.44      4387\n",
      "Thunderstorm Wind       0.60      0.84      0.70      8360\n",
      "\n",
      "         accuracy                           0.59     16736\n",
      "        macro avg       0.60      0.51      0.52     16736\n",
      "     weighted avg       0.60      0.59      0.57     16736\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test Data: Random Forest Grid Search + PCA\n",
    "\n",
    "#predicted classes for rf grid search model\n",
    "y_pred_base_gs_pca = rf_gs_pca.predict(X_test_pca)\n",
    "\n",
    "#confusion matrix for rf gs model\n",
    "test_matrix_base_gs_pca = confusion_matrix(y_test, y_pred_base_gs_pca)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(test_matrix_base_gs_pca, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass GridSearch Model - Test Data'))\n",
    "\n",
    "\n",
    "#classification report for model\n",
    "test_report_base_gs_pca = classification_report(y_test, y_pred_base_gs_pca)\n",
    "print(test_report_base_gs_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Random Forest MultiClass GridSearch Model - Test Data')\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.79      0.37      0.50      9691\n",
      "             Hail       0.61      0.44      0.51     10232\n",
      "Thunderstorm Wind       0.61      0.87      0.72     19125\n",
      "\n",
      "         accuracy                           0.63     39048\n",
      "        macro avg       0.67      0.56      0.58     39048\n",
      "     weighted avg       0.66      0.63      0.61     39048\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training Data: Random Forest Grid Search + PCA\n",
    "\n",
    "y_tpred_base_gs_pca = rf_gs_pca.predict(X_train_pca)\n",
    "\n",
    "train_matrix_base_gs_pca = confusion_matrix(y_train, y_tpred_base_gs_pca)\n",
    "\n",
    "#plotting heatmap confusion matrix\n",
    "print(sns.heatmap(train_matrix_base_gs_pca, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass GridSearch Model - Test Data'))\n",
    "\n",
    "train_report_base_gs_pca = classification_report(y_train, y_tpred_base_gs_pca)\n",
    "print(train_report_base_gs_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1239  430 2320]\n",
      " [ 286 1670 2431]\n",
      " [ 317 1021 7022]]\n",
      "Normalized confusion matrix\n",
      "[[0.31060416 0.10779644 0.5815994 ]\n",
      " [0.06519261 0.38067016 0.55413722]\n",
      " [0.03791866 0.12212919 0.83995215]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "class_names = [\"Flood\", \"Hail\", \"Thunderstorm Wind\"]\n",
    "\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(rf_gs_pca, X_test_pca, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=\"YlGnBu\",\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PCA did not improve the accuracy of our classifcation by any metric. From inspecting the classification matrix, it's clear that the model is predicting that more of the instances are a \"Thunderstorm Wind.\" This is probably because there are almost double the amount of Thunderstorm Wind events than any other event. The Random Forest fit without PCA is printed below for reference: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text(0.5, 1, 'Random Forest MultiClass Base Model - Test Data')\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(sns.heatmap(test_matrix_base, annot=True, cmap=\"YlGnBu\",fmt=\"d\").set_title(\n",
    "'Random Forest MultiClass Base Model - Test Data'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part IV: Applying Sampling Techniques"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will apply under and over sampling methods to our best performing model, the XGB Classifier, to see if our accuracy is improved."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A) Undersampling:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hail                 9691\n",
      "Flood                9691\n",
      "Thunderstorm Wind    9691\n",
      "Name: EVENT_TYPE, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#applying undersampling to training data\n",
    "under = RandomUnderSampler(sampling_strategy='not minority', random_state=SEED)\n",
    "# fit and apply the transform\n",
    "X_train_under, y_train_under = under.fit_resample(X_train, y_train)\n",
    "print(y_train_under.EVENT_TYPE.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#scaling\n",
    "std_scaler = StandardScaler()\n",
    "X_train_scaled_under = std_scaler.fit_transform(X_train_under)\n",
    "X_test_scaled_under = std_scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fitting our best model to undersampled data\n",
    "xgb_rs.fit(X_train_scaled_under,y_train_under)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best estimator\n",
    "xgb_best_under = xgb_rs.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "# save the model to disk\n",
    "filename = 'xgb_under_ml_project.sav'\n",
    "pickle.dump(xgb_best_under, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "import pickle\n",
    "xgb_best_under = pickle.load(open('xgb_under_ml_project.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2279  776  934]\n",
      " [ 593 2986  808]\n",
      " [1394 2202 4764]]\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.53      0.57      0.55      3989\n",
      "             Hail       0.50      0.68      0.58      4387\n",
      "Thunderstorm Wind       0.73      0.57      0.64      8360\n",
      "\n",
      "         accuracy                           0.60     16736\n",
      "        macro avg       0.59      0.61      0.59     16736\n",
      "     weighted avg       0.62      0.60      0.60     16736\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test: XGB\n",
    "\n",
    "y_pred_xgb_under = xgb_best_under.predict(X_test_scaled_under)\n",
    "\n",
    "#confusion matrix for xgb\n",
    "test_matrix_xgb_under = confusion_matrix(y_test, y_pred_xgb_under)\n",
    "print(test_matrix_xgb_under)\n",
    "\n",
    "\n",
    "#classification report for xgb\n",
    "test_report_xgb_under = classification_report(y_test, y_pred_xgb_under)\n",
    "print(test_report_xgb_under)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5721 1711 2259]\n",
      " [1205 6762 1724]\n",
      " [1596 2447 5648]]\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.67      0.59      0.63      9691\n",
      "             Hail       0.62      0.70      0.66      9691\n",
      "Thunderstorm Wind       0.59      0.58      0.58      9691\n",
      "\n",
      "         accuracy                           0.62     29073\n",
      "        macro avg       0.63      0.62      0.62     29073\n",
      "     weighted avg       0.63      0.62      0.62     29073\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Train: XGB\n",
    "\n",
    "y_tpred_xgb_under = xgb_best_under.predict(X_train_scaled_under)\n",
    "\n",
    "#confusion matrix for xgb\n",
    "train_matrix_xgb_under = confusion_matrix(y_train_under, y_tpred_xgb_under)\n",
    "print(train_matrix_xgb_under)\n",
    "\n",
    "\n",
    "#classification report for xgb\n",
    "train_report_xgb_under = classification_report(y_train_under, y_tpred_xgb_under)\n",
    "print(train_report_xgb_under)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2363  787  839]\n",
      " [ 651 3015  721]\n",
      " [1568 2351 4441]]\n",
      "Normalized confusion matrix\n",
      "[[0.59237904 0.19729255 0.2103284 ]\n",
      " [0.14839298 0.68725781 0.16434921]\n",
      " [0.18755981 0.2812201  0.5312201 ]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "class_names = [\"Flood\", \"Hail\", \"Thunderstorm Wind\"]\n",
    "\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(xgb_best_under, X_test_scaled, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=\"YlGnBu\",\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  16 tasks      | elapsed:   46.2s\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:  2.1min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:739: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.best_estimator_.fit(X, y, **fit_params)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=RandomForestClassifier(bootstrap=True,\n",
       "                                                    ccp_alpha=0.0,\n",
       "                                                    class_weight=None,\n",
       "                                                    criterion='gini',\n",
       "                                                    max_depth=None,\n",
       "                                                    max_features='auto',\n",
       "                                                    max_leaf_nodes=None,\n",
       "                                                    max_samples=None,\n",
       "                                                    min_impurity_decrease=0.0,\n",
       "                                                    min_impurity_split=None,\n",
       "                                                    min_samples_leaf=1,\n",
       "                                                    min_samples_split=2,\n",
       "                                                    min_weight_fraction_leaf=0.0,\n",
       "                                                    n_estimators=100,\n",
       "                                                    n_jobs=None,\n",
       "                                                    oob_score=False,\n",
       "                                                    random_state=1, verbose=0,\n",
       "                                                    warm_start=False),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions={'max_depth': [2, 4, 5, 6, 7, 8],\n",
       "                                        'max_features': ['auto', 'sqrt',\n",
       "                                                         'log2'],\n",
       "                                        'n_estimators': [100, 200, 500]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "random_grid = { \n",
    "    'n_estimators': [100, 200, 500],\n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'max_depth' : [2,4,5,6,7,8]\n",
    "}\n",
    "\n",
    "\n",
    "#fitting Random Forest Classifier model\n",
    "rf_gs_under = RandomForestClassifier(random_state=SEED)\n",
    "\n",
    "# Create gridsearch object with various combinations of parameters\n",
    "rf_gs_under = RandomizedSearchCV(rf, random_grid, cv = 5, \n",
    "                       scoring = 'accuracy', \n",
    "                       verbose=3,\n",
    "                       n_jobs = -1)\n",
    "\n",
    "rf_gs_under.fit(X_train_scaled_under,y_train_under)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best estimator\n",
    "rf_gs_under = rf_gs_under.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "# save the model to disk\n",
    "filename = 'rf_gs_under_ml_project.sav'\n",
    "pickle.dump(rf_gs_under, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "import pickle\n",
    "rf_gs_under = pickle.load(open('rf_gs_under_ml_project.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2284  832  873]\n",
      " [ 567 3154  666]\n",
      " [1302 2635 4423]]\n",
      "Normalized confusion matrix\n",
      "[[0.57257458 0.20857358 0.21885184]\n",
      " [0.1292455  0.71894233 0.15181217]\n",
      " [0.15574163 0.31519139 0.52906699]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "class_names = [\"Flood\", \"Hail\", \"Thunderstorm Wind\"]\n",
    "\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(rf_gs_under, X_test_scaled, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=\"YlGnBu\",\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## B) Oversampling with SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(57375, 34) (57375, 1)\n",
      "Flood                19125\n",
      "Thunderstorm Wind    19125\n",
      "Hail                 19125\n",
      "Name: EVENT_TYPE, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#applying SMOTE to training data\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from collections import Counter\n",
    "\n",
    "smote = SMOTE('all', random_state = SEED)\n",
    "X_train_sm, y_train_sm = smote.fit_sample(X_train, y_train)\n",
    "print(X_train_sm.shape, y_train_sm.shape)\n",
    "print(y_train_sm.EVENT_TYPE.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#scaling\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "std_scaler = StandardScaler()\n",
    "X_train_scaled_sm = std_scaler.fit_transform(X_train_sm)\n",
    "X_test_scaled_sm = std_scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  16 tasks      | elapsed:  3.4min\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed: 25.6min finished\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "/Users/breabeals/opt/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, error_score=nan,\n",
       "                   estimator=XGBClassifier(base_score=0.5, booster='gbtree',\n",
       "                                           colsample_bylevel=1,\n",
       "                                           colsample_bynode=1,\n",
       "                                           colsample_bytree=1, gamma=0,\n",
       "                                           learning_rate=0.1, max_delta_step=0,\n",
       "                                           max_depth=3, min_child_weight=1,\n",
       "                                           missing=None, n_estimators=100,\n",
       "                                           n_jobs=1, nthread=None,\n",
       "                                           objective='binary:logistic',\n",
       "                                           random_state=1, reg_alpha=0,\n",
       "                                           reg_lambda=1, scale_pos_weight=1,\n",
       "                                           seed=None, silent=None, subsample=1,\n",
       "                                           verbosity=1),\n",
       "                   iid='deprecated', n_iter=10, n_jobs=-1,\n",
       "                   param_distributions={'gamma': [0.0, 0.5, 1.0, 1.5],\n",
       "                                        'learning_rate': [0.0001, 0.001, 0.01,\n",
       "                                                          0.1, 0.2],\n",
       "                                        'max_depth': [1, 2],\n",
       "                                        'n_estimators': [100, 500, 750]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting our best model to undersampled data\n",
    "xgb_rs.fit(X_train_scaled_sm,y_train_sm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "#best estimator\n",
    "xgb_best_over = xgb_rs.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "# save the model to disk\n",
    "filename = 'xgb_over_ml_project.sav'\n",
    "pickle.dump(xgb_best_over, open(filename, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model from disk\n",
    "import pickle\n",
    "xgb_best_over = pickle.load(open('xgb_over_ml_project.sav', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2152  764 1073]\n",
      " [ 637 2895  855]\n",
      " [1317 2118 4925]]\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.52      0.54      0.53      3989\n",
      "             Hail       0.50      0.66      0.57      4387\n",
      "Thunderstorm Wind       0.72      0.59      0.65      8360\n",
      "\n",
      "         accuracy                           0.60     16736\n",
      "        macro avg       0.58      0.60      0.58     16736\n",
      "     weighted avg       0.62      0.60      0.60     16736\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test: XGB\n",
    "\n",
    "y_pred_xgb_over = xgb_best_over.predict(X_test_scaled_sm)\n",
    "\n",
    "#confusion matrix for xgb\n",
    "test_matrix_xgb_over = confusion_matrix(y_test, y_pred_xgb_over)\n",
    "print(test_matrix_xgb_over)\n",
    "\n",
    "\n",
    "#classification report for xgb\n",
    "test_report_xgb_over = classification_report(y_test, y_pred_xgb_over)\n",
    "print(test_report_xgb_over)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11075  3611  4439]\n",
      " [ 2633 13320  3172]\n",
      " [ 3115  4641 11369]]\n",
      "                   precision    recall  f1-score   support\n",
      "\n",
      "            Flood       0.66      0.58      0.62     19125\n",
      "             Hail       0.62      0.70      0.65     19125\n",
      "Thunderstorm Wind       0.60      0.59      0.60     19125\n",
      "\n",
      "         accuracy                           0.62     57375\n",
      "        macro avg       0.62      0.62      0.62     57375\n",
      "     weighted avg       0.62      0.62      0.62     57375\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Train: XGB\n",
    "\n",
    "y_tpred_xgb_over = xgb_best_over.predict(X_train_scaled_sm)\n",
    "\n",
    "#confusion matrix for xgb\n",
    "train_matrix_xgb_over = confusion_matrix(y_train_sm, y_tpred_xgb_over)\n",
    "print(train_matrix_xgb_over)\n",
    "\n",
    "\n",
    "#classification report for xgb\n",
    "train_report_xgb_over = classification_report(y_train_sm, y_tpred_xgb_over)\n",
    "print(train_report_xgb_over)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2754  790  445]\n",
      " [1079 2973  335]\n",
      " [3091 2534 2735]]\n",
      "Normalized confusion matrix\n",
      "[[0.6903986  0.19804462 0.11155678]\n",
      " [0.24595395 0.67768407 0.07636198]\n",
      " [0.36973684 0.30311005 0.32715311]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot non-normalized confusion matrix\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "class_names = [\"Flood\", \"Hail\", \"Thunderstorm Wind\"]\n",
    "\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(xgb_best_over, X_test_scaled, y_test,\n",
    "                                 display_labels=class_names,\n",
    "                                 cmap=\"YlGnBu\",\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our undersampling and oversampling techniques did not result in a better model. Both models had a test accuracy 4% lower than our best performing model thus far. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part V: Summary"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A) Model Overview: \n",
    "\n",
    "Our three best models arnd their test accuracy/ train accuracy are shown below: \n",
    "\n",
    "* __XGBoost Classifier:__\n",
    "\n",
    "    * Test Accuracy: 0.64\n",
    "    * Train Accuracy: 0.67\n",
    "    * Test Weighted Average: 0.63\n",
    "\n",
    "* __Random Forest Classifier:__\n",
    "\n",
    "    * Test Accuracy: 0.63\n",
    "    * Train Accuracy: 0.66\n",
    "    * Test Weighted Average: 0.62\n",
    "    \n",
    "    \n",
    "* __AdaBoost Classifier:__\n",
    "\n",
    "    * Test Accuracy: 0.61\n",
    "    * Train Accuracy: 0.62\n",
    "    * Test Weighted Average: 0.60\n",
    "\n",
    "\n",
    "Overall, our best performing model in terms of test accuracy was our XGBoost Classifier, without PCA, and without any form of undersampling or oversampling. The model had a test accuracy of 64% and a train accuracy of 67%. While the model could be improved with a slightly smaller generalization gap, it is expected for the test accuray to be slightly less than the train accuracy, and overall the model is generalizing well. \n",
    "\n",
    "Our Random Forest Classifier had only slightly lower test accuracy, 63%, with a training accuracy of 66%. Much like the XGBoost Classifier, there is a 3% difference between the test and train accuracy. Considering the generalization gap is the same, and the XGBoost Classifier outperformed by 1% in both test acccuracy and test weighted average accuracy, we will favor the XGBoost Model over the Random Forest. \n",
    "\n",
    "Another model that is worth consideration is the AdaBoost Classifier, with a test accuracy of 61%. While this model slightly performed the other two models mentioned, the AdaBoost Classifier only has a 1% difference between the test and train accuracy. This model appears to be generalizing the best, but at the cost of slightly lower accuracy. \n",
    "\n",
    "Interesingly, PCA, and sampling techniques to balance the data did not result in significantly better overall results nor did it help our model see improvement in minority class results. Specifically looking at undersampling, the accuracy is lower, but the model did a much better job of classifying flood and hail events, which were the less frequently occurring events. Depending on the specific business case where this classification might be applied, whether overall accuracy or accuracy over the different events is more important, it might make sense to use undersampling on the data\n",
    "\n",
    "Below our the results of how each technique compared to it's base model: \n",
    "\n",
    "\n",
    " * __Applying PCA:__\n",
    " \n",
    "     * Test Accuracy: -4%\n",
    "     * Train Accuracy: -3%\n",
    "     * Test Weighted Average: -5%\n",
    "     \n",
    "     \n",
    " * __Applying Undersampling:__\n",
    " \n",
    "     * Test Accuracy: -4%\n",
    "     * Train Accuracy: -5%\n",
    "     * Test Weighted Average: -3%\n",
    "     \n",
    "     \n",
    " * __Applying Oversampling:__\n",
    " \n",
    "     * Test Accuracy: -4%\n",
    "     * Train Accuracy: -5%\n",
    "     * Test Weighted Average: -3%\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## B)  Future Considerations: \n",
    "\n",
    "In the majority of our models, location and temperature related features were the most important. However, in our best performing model, using XGBoost Classifier, features related to fraction cloud coverage were the best. I would be interested in doing a little more digging into fraction cloud coverage to see how I could further engineer that feature. \n",
    "\n",
    "I would also like to further engineer the location realted features. Our geoclusters where a great start to grouping the latitude and longitudes into meaningful groups, but I believe more could be done. If I were to continue this project, I would want to match each location to its state using the latitude and longitude. Then, I would map each state to its resepctive region of the country (ie: Midwest, Pacific Northwest, etc) as weather is often regional. \n",
    "\n",
    "I would also like to explore more sampling techniques, including a combination of oversampling and undersampling, and broadening the scope of the project to attempt to classify all of the types of severe weather events. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
